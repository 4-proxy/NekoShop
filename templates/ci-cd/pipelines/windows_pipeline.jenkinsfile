// author: 4-proxy
// version: 1.1.0

// Requirements for agent components: openjdk21, git, python.

pipeline{

    agent {
        label 'windows'
    }

    options {
        disableResume()
    }

    stages {
        stage('Display Info') {
            steps {
                echo  '==========Display Info=========='

                bat '''
                    @echo off
                    for /f "delims=" %%i in ('ver') do set version=%%i

                    echo Agent OS Info
                    echo Host: %COMPUTERNAME%
                    echo Username: %USERNAME%
                    echo System: %version% %OS% %PROCESSOR_ARCHITECTURE% %NUMBER_OF_PROCESSORS%
                    echo Current path: %CD%
                '''

                bat '''
                    @echo off

                    echo Pipeline Info:
                    echo Job name: %JOB_NAME%
                    echo Build number: %BUILD_NUMBER%
                    echo Build ID: %BUILD_ID%
                    echo Workspace path: %WORKSPACE%
                '''
            }
        }

        // --------------------------------------------------------------------
        stage('Component Check') {
            steps {
                echo '==========Component Check=========='

                bat '''
                    java --version
                    git --version
                    python --version
                '''
            }

            post{
                success{
                    echo '=====+++++Component Check Successfully+++++====='
                }
                failure{
                    echo '=====-----Component Check Failure-----====='
                    error('Component check failed, pipeline is stopped.')
                }
            }
        }

        // --------------------------------------------------------------------
        stage('GitHub Clone') {
            environment {
                GITHUB_URL = 'https://github.com/4-proxy/NekoShop.git'
                BRANCH_NAME = 'windows-dev'
            }

            steps {
                echo '==========GitHub Clone=========='

                bat 'git clone --single-branch --branch %BRANCH_NAME% --depth 1 %GITHUB_URL% .'

                bat 'dir /q'
            }

            post{
                success{
                    echo '=====+++++GitHub Clone Successfully+++++====='
                }
                failure{
                    echo '=====-----GitHub Clone Failure-----====='
                    error('Cloning the repository failed, pipeline is stopped.')
                }
            }
        }

        // --------------------------------------------------------------------
        stage('SetUp Configuration') {
            options {
                retry(1)
            }

            steps {
                echo '==========SetUp Configuration=========='

                // Transfer configuration files
                withCredentials([file(credentialsId: 'project_config_windows', variable: 'ProjectConfigFile')]) {
                    bat 'move %ProjectConfigFile% ./project_code/windows/'
                }

                withCredentials([file(credentialsId: 'bot_token', variable: 'TestBotToken')]) {
                    bat 'move %TestBotToken% ./project_code/common/tests/tests-bot_handling/test_data/'
                }

                // SetUp environment
                script {
                    powershell('''
                    python -m venv .venv

                    Set-ExecutionPolicy Bypass -Scope Process

                    & ./.venv/scripts/activate

                    pip install -r ./project_code/windows/requirements.txt > $null

                    pip list
                    '''
                    )
                }
            }

            post {
                success {
                    echo '=====+++++SetUp Configuration Successfully+++++====='
                }
                failure {
                        echo '=====-----SetUp Configuration Failure-----====='
                }
            }
        }

        // ------------------------------------------------------------------
        stage('Check Configuration') {
            steps {
                echo '==========Check Configuration=========='

                // project_config.json
                script {
                    def filePath = './project_code/windows/project_config.json'
                    if (fileExists(filePath)) {
                        echo 'project_config.json is exist!'
                    } else {
                        error 'project_config.json not found, uses ${filePath}!'
                    }
                }

                // bot_token.py
                script {
                    def filePath = './project_code/common/tests/tests-bot_handling/test_data/bot_token.py'
                    if (fileExists(filePath)) {
                        echo 'bot_token.py is exist!'
                    } else {
                        error 'bot_token.py not found, uses ${filePath}!'
                    }
                }
            }

            post {
                success{
                    echo '=====+++++Check Configuratio Successfully+++++====='
                }
                failure{
                    echo '=====-----Check Configuratio Failure-----====='
                    error('The configuration check failed, pipeline is stopped!')
                }
            }
        }

        // ------------------------------------------------------------------
        stage('Testing') {
            parallel {
                stage('Auto Testing') {
                    steps {
                        echo '==========Auto Testing=========='

                        script {
                            powershell('''
                            Set-ExecutionPolicy Bypass -Scope Process

                            & ./.venv/scripts/activate

                            cd ./project_code

                            coverage run -m unittest discover -s ./common/tests -p "test_*.py"

                            coverage report
                            '''
                            )
                        }
                    }

                    post {
                        success {
                            echo '=====+++++Auro Testing Successfully+++++====='
                        }
                        failure {
                            echo '=====-----Auto Testing Failure-----====='
                            error('Auto Testing failed, pipeline is stopped!')
                        }
                    }
                }

                stage('Manual Testing') {
                    steps {
                        echo '==========Manual Testing=========='
                    }

                    post {
                        success {
                            echo '=====+++++Manual Testing Successfully+++++====='
                        }
                        failure {
                            echo '=====-----Manual Testing Failure-----====='
                            error('Manual Testing failed, pipeline is stopped!')
                        }
                    }
                }
            }
        }

        // ------------------------------------------------------------------
        stage('Deploy Code') {
            steps {
                echo '==========Deploy Code=========='

                script {
                    powershell('''
                    Set-ExecutionPolicy Bypass -Scope Process

                    & ./.venv/scripts/activate

                    cd ./project_code

                    $process = Start-Process python -ArgumentList "-m windows.main" -PassThru

                    Start-Sleep -Seconds 15

                    Stop-Process -Id $process.Id -Force
                    '''
                    )
                }
            }
        }

        // ------------------------------------------------------------------
        stage('Notification') {
            steps {
                echo '==========Notification=========='
            }
        }
    }

    post {
        always {
            cleanWs(
                cleanWhenAborted: true,
                cleanWhenFailure: true,
                deleteDirs: true)
        }
    }
}
